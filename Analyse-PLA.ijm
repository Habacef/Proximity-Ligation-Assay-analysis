inputDir = getDirectory("choose the input directory");
ImgList = getFileList(inputDir); 
    for (e=0; e<ImgList.length; e++) {
        file = inputDir + ImgList[e];
        splitDir= inputDir + "/"+e+"/";
        File.makeDirectory(splitDir);
        m=".tif"; 
        a=0;
        mIndex = indexOf(file,m); 
        if (mIndex > 0) {
            open(file);
            analyzeImage();
            print("run");
        }
        mIndex=0;
    }
function analyzeImage(){
name = getTitle();
run("Split Channels");
//change the following lines according to the names generated by ImageJ after splitting the channels of your multichannel input
selectWindow("C1-"+name);
run("Close");
selectWindow("C2-"+name);
raw_green = getTitle();
run("Duplicate...", " ");
processed_green = getTitle();
selectWindow("C3-"+name);
raw_blue = getTitle();
run("Duplicate...", " ");
processed_blue = getTitle();
selectWindow(processed_green);
saveAs("TIFF", splitDir + "PLA Thresholded "+name+".tif");

setAutoThreshold("Intermodes dark no-reset");
setOption("BlackBackground", false);
run("Make Binary");

run("Analyze Particles...", "size=0.0025-0.03 display");
selectWindow("Results");
saveAs("Results", splitDir + "Total Number of "+name+".txt");
run("Clear Results");

selectWindow(processed_blue);
run("Gaussian Blur...", "sigma=5");
setAutoThreshold("Mean dark no-reset");
setOption("BlackBackground", false);
run("Convert to Mask");
// change the size according to your image resolution and in which size PLA-signals and Nuclei are expected to be
run("Analyze Particles...", "size=1-1000 add exclude show=Masks");
selectWindow("Mask of "+processed_blue);
run("Invert");
saveAs("TIFF", splitDir + "Mask of "+name+".tif");
roiManager("deselect");
roiManager("measure");
selectWindow("Results");
saveAs("Results", splitDir + "Number_of_Nuclei"+name+".txt");
run("Clear Results");

roiCount = roiManager("count");
selectWindow("PLA Thresholded "+name+".tif");
for (i = 0;  i < roiCount; i++) {
    roiManager("select", i);
// same here, depending on the size of your PLA-events
    run("Analyze Particles...", "size=0.0025-0.03 display");
}
roiManager("select all");
roiManager("Save", splitDir + "ROIs of "+name+".zip");
selectWindow("Results");
saveAs("Results", splitDir + "Nuklear-Exclude-Results_of_"+name+".txt");
run("Clear Results");
run("Close");
roiManager("select all");
roiManager("delete");

selectWindow(processed_blue);
run("Invert");
w = getWidth(); 
h = getHeight(); 
makeRectangle(1, 1, w-2, h-2); 
run("Crop"); 
run("Canvas Size...", "width="+w+" height="+h+" position=Center");
run("Invert");
run("Analyze Particles...", "size=1-1000 add show=Masks");
roiManager("select all");
roiManager("combine");
run("Make Inverse");
roiManager("add");
selectWindow("PLA Thresholded "+name+".tif");
roiCount = roiManager("count");
roiManager("select",(roiCount-1));
run("Analyze Particles...", "size=0.0025-0.03 add display");
selectWindow("Results");
saveAs("Results", splitDir + "CellularResult-noneNuklear_of_"+name+".txt");

run("Clear Results");
run("Close");

// This code allows retrieval of information about; PLA-events in nuclei that are not on the edges of the image; All PLA-events; All PLA-events that are cellular. 
// Additionally, substracting "nuclear PLA events" and "cellular PLA events" from the "All PLA events" gives information on how many PLA events are in nuclei that are cut on the edge of the Image. 
// Thus, use Intracellular, nuclear and then decide if "All PLA events" should include the ones that are in nuclei cut on edges.
// Also, the number of nuclei, including the cut nuclei is inside the "cellular" dots file at the beginning (Area bigger than 0). 
// Information about the number of nuclei used in the beginning is stored in the .zip file (number of ROI files in the .zip file)

selectWindow("PLA Thresholded " + name + ".tif");
run("Grays");
run("Remove Overlay");
saveAs("TIFF", splitDir + "Raw of "+name+".tif");
run("Close");
selectWindow(processed_blue);
run("Close");
selectWindow("Mask of "+processed_blue);
run("Close");
selectWindow("Mask of "+name+".tif");
run("Close");
selectWindow(raw_green);
run("Close");
selectWindow(raw_blue);
run("Close");
roiManager("deselect");
roiManager("delete");
}
